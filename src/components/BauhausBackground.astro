---
interface Props {
  type: 'whitney' | 'autostrada' | 'wiphala' | 'pompeii' | 'monitor';
  class?: string;
  imageUrl?: string;
}

const { type, class: className = '', imageUrl } = Astro.props;

const patterns = {
  whitney: {
    bgClass: 'bg-accent-bronze',
    pattern: 'circles',
  },
  autostrada: {
    bgClass: 'bg-accent-oxblood',
    pattern: 'lines',
  },
  wiphala: {
    bgClass: 'bg-accent-gold',
    pattern: 'squares',
  },
  pompeii: {
    bgClass: 'bg-accent-bronze',
    pattern: 'squares',
  },
  monitor: {
    bgClass: 'bg-accent-oxblood',
    pattern: 'circles',
  },
};

const { bgClass, pattern } = patterns[type];

/**
 * Default to Pompeii background if no image is provided
 */
const defaultImage = '/hero/pompeii.avif';
---

<div class:list={['w-full h-full relative overflow-hidden', className]}>
  {/* Image Layer */}
  {
    (imageUrl || defaultImage) && (
      <div class='absolute inset-0'>
        <img src={imageUrl || defaultImage} alt='' class='w-full h-full object-cover' />
        <div class='absolute inset-0 bg-gradient-to-t from-black/30 to-transparent mix-blend-multiply' />
      </div>
    )
  }

  {/* Bauhaus Pattern Layer */}
  <div class:list={['absolute inset-0 mix-blend-soft-light', bgClass]}>
    {
      pattern === 'circles' && (
        <div class='absolute inset-0'>
          <div class='absolute top-1/4 left-1/4 w-1/2 h-1/2 border-8 border-white rounded-full shape-rotate' />
          <div class='absolute top-1/3 left-1/3 w-1/3 h-1/3 border-4 border-white rounded-full shape-rotate' style='animation-direction: reverse;' />
        </div>
      )
    }

    {
      pattern === 'lines' && (
        <div class='absolute inset-0'>
          <div class='grid grid-cols-6 h-full'>
            {[...Array(6)].map((_, i) => (
              <div class='border-l-2 border-white h-full transform hover-rotate' style={`transition-delay: ${i * 100}ms`} />
            ))}
          </div>
        </div>
      )
    }

    {
      pattern === 'squares' && (
        <div class='absolute inset-0'>
          <div class='grid grid-cols-3 grid-rows-3 h-full gap-4 p-4'>
            {[...Array(9)].map(() => (
              <div class='border-2 border-white hover-rotate' />
            ))}
          </div>
        </div>
      )
    }
  </div>
</div>

<style>
  .shape-rotate {
    animation: rotate 20s linear infinite;
  }

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .hover-rotate {
    transition: transform 0.3s ease;
  }

  .hover-rotate:hover {
    transform: rotate(3deg);
  }
</style>
