---

---

<section class='py-32 relative overflow-hidden'>
  <!-- Natural Background Pattern -->
  <div class='absolute inset-0 opacity-20'>
    <div class='absolute inset-0 bg-gradient-to-b from-sand/10 via-transparent to-transparent'></div>
  </div>

  <!-- Sunset Accent Line -->
  <div class='absolute top-0 left-1/2 -translate-x-1/2 w-[1px] h-24 bg-gradient-to-b from-sunset/0 via-sunset to-sunset/0'></div>

  <div class='container relative'>
    <div class='max-w-4xl mx-auto text-center'>
      <!-- Main Heading -->
      <h1 class='font-display text-6xl md:text-7xl font-medium mb-8 tracking-tight leading-tight'>
        <span class='block text-fade-in' id='dynamicText'>It's me, Javier!</span>
      </h1>

      <!-- Role Description -->
      <p class='font-display text-2xl md:text-3xl mb-6 text-sea tracking-refined font-normal'>Creative Developer, Composer & Storyteller</p>

      <!-- Personal Philosophy -->
      <p class='text-lg md:text-xl mb-12 max-w-2xl mx-auto text-text-secondary leading-relaxed font-light'>
        From the sunsets of Antofagasta's coast to the vibrant pulse of New York City — I craft digital experiences that give people more time to embrace life's
        beautiful moments.
      </p>

      <!-- CTA Buttons -->
      <div class='flex justify-center gap-6 flex-wrap'>
        <a
          href='/portfolio'
          class='px-8 py-3.5 bg-sea text-white hover:bg-desert transition-all duration-400 tracking-elegant text-base font-medium border border-transparent hover:border-desert/20'
        >
          View Portfolio
        </a>
        <a
          href='/contact'
          class='px-8 py-3.5 border border-dusk hover:border-desert text-dusk hover:text-desert transition-all duration-400 tracking-elegant text-base font-medium'
        >
          Get in Touch
        </a>
      </div>
    </div>
  </div>
</section>

<script>
  interface QueueItem {
    from: string;
    to: string;
    start: number;
    end: number;
    char?: string;
  }

  class TextScramble {
    private el: HTMLElement;
    private chars: string;
    private queue: QueueItem[];
    private frame: number;
    private frameRequest: number;
    private resolve: ((value: void) => void) | null;

    constructor(el: HTMLElement) {
      this.el = el;
      this.chars = '⚜︎†‡§¶★≈∆∏∑'; // More elegant special characters
      this.queue = [];
      this.frame = 0;
      this.frameRequest = 0;
      this.resolve = null;
      this.update = this.update.bind(this);
    }

    setText(newText: string): Promise<void> {
      const oldText = this.el.innerText;
      const length = Math.max(oldText.length, newText.length);
      const promise = new Promise<void>((resolve) => (this.resolve = resolve));
      this.queue = [];

      for (let i = 0; i < length; i++) {
        const from = oldText[i] || '';
        const to = newText[i] || '';
        const start = Math.floor(Math.random() * 40);
        const end = Math.floor(Math.random() * 40) + start;
        this.queue.push({ from, to, start, end });
      }

      cancelAnimationFrame(this.frameRequest);
      this.frame = 0;
      this.update();
      return promise;
    }

    update(): void {
      let output = '';
      let complete = 0;

      for (let i = 0; i < this.queue.length; i++) {
        let { from, to, start, end, char } = this.queue[i];

        if (this.frame >= end) {
          complete++;
          output += to;
        } else if (this.frame >= start) {
          if (!char || Math.random() < 0.28) {
            char = this.randomChar();
            this.queue[i].char = char;
          }
          output += char;
        } else {
          output += from;
        }
      }

      this.el.innerText = output;

      if (complete === this.queue.length) {
        this.resolve?.();
      } else {
        this.frameRequest = requestAnimationFrame(this.update);
        this.frame++;
      }
    }

    private randomChar(): string {
      return this.chars[Math.floor(Math.random() * this.chars.length)];
    }
  }

  /**
   * Commenting by now, to avoid unneeded CLS drama.
   * By now.
   */
  // const textElement = document.getElementById('dynamicText');
  // if (textElement) {
  //   const fx = new TextScramble(textElement);
  //   setTimeout(() => {
  //     fx.setText(textElement.innerText);
  //   }, 800);
  // }
</script>
