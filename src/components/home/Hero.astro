---
import { Image } from 'astro:assets';
---

<section class='pt-32 pb-24 relative overflow-hidden'>
  <!-- Geometric Background Pattern -->
  <div class='absolute inset-0 grid-bg opacity-50'></div>

  <div class='container relative'>
    <div class='max-w-4xl mx-auto text-center'>
      <!-- Main Heading with Dynamic Text Effect -->
      <h1 class='text-6xl md:text-7xl font-bold mb-6 tracking-tight'>
        <span class='block' id='dynamicText'>Hi! I'm Javier</span>
      </h1>

      <!-- Roles Subheading -->
      <p class='text-xl md:text-2xl mb-8 text-gray-700'>Creative Developer, Composer & Storyteller</p>

      <!-- Brief Introduction -->
      <p class='text-lg mb-12 max-w-2xl mx-auto text-gray-600'>
        Crafting digital experiences where code meets creativity, sound shapes stories, and innovation drives impact.
      </p>

      <!-- CTA Buttons -->
      <div class='flex justify-center gap-4 flex-wrap'>
        <a href='/portfolio' class='px-8 py-3 bg-black text-white hover-lift font-medium'> View Portfolio </a>
        <a href='/contact' class='px-8 py-3 border-2 border-black hover-lift font-medium'> Get in Touch </a>
      </div>
    </div>
  </div>
</section>

<script>
  interface QueueItem {
    from: string;
    to: string;
    start: number;
    end: number;
    char?: string;
  }

  class TextScramble {
    private el: HTMLElement;
    private chars: string;
    private queue: QueueItem[];
    private frame: number;
    private frameRequest: number;
    private resolve: ((value: void) => void) | null;

    constructor(el: HTMLElement) {
      this.el = el;
      this.chars = '!<>-_\\/[]{}â€”=+*^?#';
      this.queue = [];
      this.frame = 0;
      this.frameRequest = 0;
      this.resolve = null;
      this.update = this.update.bind(this);
    }

    setText(newText: string): Promise<void> {
      const oldText = this.el.innerText;
      const length = Math.max(oldText.length, newText.length);
      const promise = new Promise<void>((resolve) => (this.resolve = resolve));
      this.queue = [];

      for (let i = 0; i < length; i++) {
        const from = oldText[i] || '';
        const to = newText[i] || '';
        const start = Math.floor(Math.random() * 40);
        const end = start + Math.floor(Math.random() * 40);
        this.queue.push({ from, to, start, end });
      }

      cancelAnimationFrame(this.frameRequest);
      this.frame = 0;
      this.update();
      return promise;
    }

    update(): void {
      let output = '';
      let complete = 0;

      for (let i = 0; i < this.queue.length; i++) {
        let { from, to, start, end, char } = this.queue[i];

        if (this.frame >= end) {
          complete++;
          output += to;
        } else if (this.frame >= start) {
          if (!char || Math.random() < 0.28) {
            char = this.randomChar();
            this.queue[i].char = char;
          }
          output += char;
        } else {
          output += from;
        }
      }

      this.el.innerText = output;

      if (complete === this.queue.length) {
        this.resolve?.();
      } else {
        this.frameRequest = requestAnimationFrame(this.update);
        this.frame++;
      }
    }

    private randomChar(): string {
      return this.chars[Math.floor(Math.random() * this.chars.length)];
    }
  }

  // Initialize text effect
  const textElement = document.getElementById('dynamicText');
  if (textElement) {
    const fx = new TextScramble(textElement);
    fx.setText('Hi! Im Javier');
  }
</script>
